#!/bin/bash
#
################################################################################
# baixarAtualizacao.sh - Ira ler o arquivo gerado e baixar a atualizacao referente a data
#
# DATA: 01/07/2024 20:48 - Versao 1
#
# ------------------------------------------------------------------------------
# Autor: Luiz Gustavo <luiz.gustavo@avancoinfo.com.br>
#                     <luizgcesar@gmail.com.br>
# site: https://github.com/ketteiGustavo
# ------------------------------------------------------------------------------
# Versao 1: leitura do arquivo que contem a informacao
# ------------------------------------------------------------------------------
# Objetivo: facilitar a execucao do atualizador.
###############################


MENSAGEM_USO="
Programa: $(basename "$0")

--------------------------------------------------------------------------------
                              [OPCOES DISPONIVEIS]

OPCOES NA LINHA DE COMANDO:
    -h, --help      Mostra esta tela de ajuda e sai
    -V, --version   Mostra a versao do programa e sai
MODO DE USAR:

--------------------------------------------------------------------------------
"
#

# variaveis
URL_BASE_VERSAO40="https://s3.amazonaws.com/avancoprogramas/integral/versao40-"
URL_BASE_VERSAO41="https://s3.amazonaws.com/avancoprogramas/integral/versao41-"

URL_BASE_RELEASE40="https://s3.amazonaws.com/avancoprogramas/integral/release40-"
URL_BASE_RELEASE41="https://s3.amazonaws.com/avancoprogramas/integral/release-"

URL_ATUALIZADOV40=""
URL_ATUALIZADOV41=""

URL_ATUALIZADO_RELEASE=""

URL_ATUALIZADO_RELEASE_V40=""
URL_ATUALIZADO_RELEASE_V41=""

URL_BUSCAR_RELEASE=""

versao_Portal=""
release=""
data_release=""

release_busca=""

PASTA_DESTINO="/home/luiz/Downloads/atualizacoes"

infos_extras="/home/luiz/Downloads/atualizacoes/infos_extras.log"

SCRIPT_PATH="$0"
SCRIPT_URL="https://raw.githubusercontent.com/ketteiGustavo/atualizador/main/Atual/baixarAtualizacao2"
URL_CONTROLE_VERSAO_RELEASE="https://raw.githubusercontent.com/ketteiGustavo/atualizador/main/Atual/controle_ver_rel.txt"

#data_atual=$(date +%Y%m%d)
data_atual="20241219"



# Funcao para extrair e exibir a versao do programa
mostrar_versao() {
    local versao=$(grep '^# DATA:' "$0" | head -1 | cut -d '-' -f 2 | sed 's/Versao //')
    echo -n "-Programa: $(basename "$0")"
    echo
    echo "-Versao: $versao"
}



arquivo="/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/controle_ver_rel.txt"

# Funcao para verificar qual o cobol usado
VERIFICA_COBOL() {
    #RESULTADO=$(cobrun 2>&1)
    #if [[ $RESULTADO =~ V([0-9]+\.[0-9]+) ]]; then
    #    versaoCobol="${BASH_REMATCH[1]}"
    #    echo "Versao do Cobol: $versaoCobol"
    #    inf_versaoCobol="$versaoCobol"
    #fi
    versaoCobol="4.0"
}


# Função para ler o arquivo e armazenar as informações em variáveis
ler_arquivo() {
    local arquivo="$1"
    local versao
    declare -A releases

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^Versao\ disponivel\ no\ portal:\ ([0-9]+)$ ]]; then
            versao="${BASH_REMATCH[1]}"
        elif [[ "$linha" =~ ^RELEASE\ ([A-Z])\ -\ DATA:\ ([0-9]+)$ ]]; then
            releases["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
        fi
    done < "$arquivo"

    echo "Versao disponivel no portal: $versao"
    versao_Portal="$versao"
    echo "$versao" > "/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/versaoIntegral"
    
    for release in "${!releases[@]}"; do
        echo "Release $release - Data: ${releases[$release]}" > /dev/null
    done
    
    # Verificar a release disponível de acordo com a data atual
    verificar_release_disponivel "$versao" releases
}

# Função para converter data no formato DDMMYY para YYYY-MM-DD
converter_data() {
    local data="$1"
    echo "20${data:4:2}-${data:2:2}-${data:0:2}"
}

# Função para verificar a release disponível de acordo com a data atual
verificar_release_disponivel() {
    local versao="$1"
    declare -n releases_ref="$2"

    echo "mostrando data de hoje: $data_atual"

    for release in "${!releases_ref[@]}"; do
        local data_release="${releases_ref[$release]}"
        local data_release_yyyymmdd=$(date -d "$(converter_data "$data_release")" +%Y%m%d)

        if [[ "$data_atual" -ge "$data_release_yyyymmdd" ]]; then
            echo "Release atual: $release - Data: $data_release"
            echo "$release" > "/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/releaseIntegral"
            echo "$data_release" > "/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/dataReleaseIntegral"
            return
        fi
    done

    echo "Nenhuma release disponível encontrada para a data atual."
}

# Funcao para converter datas no formato YYYYMMDD, para ser usado em equacoes de comparacao, maior, menor e igual
CONVERTER_DATAS() {
    local dia="${1:0:2}"
    local mes="${1:2:2}"
    local ano="${1:4:2}"
    
    #echo "Dia: $dia"
    #echo "Mes: $mes"
    #echo "Ano: $ano"
    
    # Convertendo para o formato 'YYYYMMDD' para facilitar a adição de dias
    local data_formatada="20${ano}${mes}${dia}"
    echo "$data_formatada"
    
}

# Funcao para obter o link da versao atual, com base em comparacao de data por trimestre
BAIXAR_VERSAO() {
    VERIFICA_COBOL
    versaoBusca=$(<"/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/versaoIntegral")
    echo "$versaoBusca"
    # Verificando a versao do COBOL
    if [ "$versaoCobol" == "4.0" ]; then
        URL_BUSCAR_VERSAO="$URL_BASE_VERSAO40"
    elif [ "$versaoCobol" == "4.1" ]; then
        URL_BUSCAR_VERSAO="$URL_BASE_VERSAO41"
    else
        echo "Versao do COBOL invalida."
        echo "Versao do COBOL invalida." >> $ERRO_LOG_FILE
        exit 1
    fi

    URL_ATUALIZADO="$URL_BUSCAR_VERSAO$versaoBusca.rar"
    echo "$URL_ATUALIZADO"
    if curl --output /dev/null --silent --head --fail "$URL_ATUALIZADO"; then
        echo "Link encontrado para 'versao'"
        wget -c "$URL_ATUALIZADO" -P "$PASTA_DESTINO"
        return 0
    fi
    sleep 1
}

# Funcao para verificar se a release e valida e mais recente
BAIXAR_RELEASE() {
    VERIFICA_COBOL
    release_busca=$(<"/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/dataReleaseIntegral")
    versao_busca=$(<"/home/luiz/Workspaces/Linux_privado/Novos_Shell_Script/Atualizador Automatico/Atual/versaoIntegral")
    echo "arquivo txt release: $release_busca"
    echo "arquivo txt versao : $versao_busca"
    local rel="${release_busca:0:4}"
    local ver="${versao_busca:0:4}"
    
    echo "tratada versao: $ver"
    echo "tratada release: $rel"
    

    # Verificando a versao do COBOL
    if [ "$versaoCobol" == "4.0" ]; then
        URL_BUSCAR_RELEASE="$URL_BASE_RELEASE40"
    elif [ "$versaoCobol" == "4.1" ]; then
        URL_BUSCAR_RELEASE="$URL_BASE_RELEASE41"
    else
        echo "Versao do COBOL invalida."
        exit 1
    fi
    if curl --output /dev/null --silent --head -fail "https://s3.amazonaws.com/avancoprogramas/integral/versao41-090724.rar"; then
        wget -c "https://s3.amazonaws.com/avancoprogramas/integral/versao41-090724.rar" -P "$PASTA_DESTINO"
        return 0
    fi

    URL_ATUALIZADO_RELEASE="$URL_BUSCAR_RELEASE$ver-a-$rel.rar"
    if curl --output /dev/null --silent --head --fail "$URL_ATUALIZADO_RELEASE"; then
        wget -c "$URL_ATUALIZADO_RELEASE" -P "$PASTA_DESTINO"
        return 0
    fi
}

# Funcao para validar versao e release no cliente e baixar somente o necessario
VALIDAR_VERSAO_RELEASE () {
    local data_versao_comparar=$(CONVERTER_DATAS "$versao_Portal")
    local letra_release_atual="$release"
    local calculo_data=$(date -d "${data_versao_comparar} +6 days" +"%Y%m%d")
    local calculo_data_limite=$(date -d "${data_versao_comparar} +3 months" +"%Y%m%d")
    echo "1: $calculo_data"
    echo "2: $calculo_data_limite"
    echo "3: $data_versao_comparar"

    read -p "Informe a versao: " versao_informada

    local data_informada_comparar=$(CONVERTER_DATAS "$versao_informada")
    echo "$data_informada_comparar"
    if [ "$data_informada_comparar" -gt "$calculo_data" ] && [ $data_informada_comparar -lt $calculo_data_limite ]; then
        echo "A release atual e: $letra_release_atual"
    fi
    read -p "informe uma letra: " letra_informada
    letra_informada=$(echo "$letra_informada" | tr '[:lower:]' '[:upper:]')

    echo "voce informou: $letra_informada"
    if [[ "$letra_informada" > "M" ]]; then
        echo "RELEASE INVALIDA"
    fi

    if [ "$data_informada_comparar" -lt "$data_versao_comparar" ]; then
        echo "Baixando versao e release..."
        BAIXAR_VERSAO
        BAIXAR_RELEASE
    elif [ "$data_informada_comparar" -eq "$data_versao_comparar" ]; then
        echo "INTEGRAL NA VERSAO ATUAL"
        echo "$data_atual"
        if [ "$data_atual" -gt "$calculo_data" ]; then
            echo "A release atual e: $letra_release_atual"
            if [[ "$letra_informada" < "$letra_release_atual" ]]; then
                echo "Baixando release..."
                BAIXAR_RELEASE
            elif [[ "$letra_informada" == "$letra_release_atual" ]]; then
                echo "INTEGRAL ESTA COM A RELEASE ATUAL!"
            else
                echo "RELEASE INVALIDA!"
            fi
        
        fi


            
    else
        echo "VERSAO INVALIDA!"
    fi
}

# Funcao para atualizar o script sempre para a versao mais recente
UPDATE () {
    script_path="$0"
    echo "Baixando versao mais recente do atualizador"
    curl -os "$SCRIPT_PATH.tmp" "$SCRIPT_URL" || wget -ocq "$SCRIPT_PATH.tmp" "$SCRIPT_URL"

    if [ $? -eq 0 ]; then
        mv "$SCRIPT_PATH.tmp" "$SCRIPT_PATH"
        chmod +x "$SCRIPT_PATH"
        echo "Atualizacao concluida. Execute o script novamente..."
    else
        echo "Erro ao baixar a atualizacao."
        rm -f "$SCRIPT_PATH.tmp"
    fi
    exit
}


# Funcao para baixar arquivo atualizado
BAIXAR_CONTROLE () {
    echo "OBTENDO VERSAO E RELEASE"
    curl -os "$arquivo.tmp" "$URL_CONTROLE_VERSAO_RELEASE" || wget -ocq "$arquivo.tmp" "$URL_CONTROLE_VERSAO_RELEASE"

    if [ $? -eq 0 ]; then
        mv "$arquivo.tmp" "$arquivo"
        chmod 766 "$arquivo"

        echo "DETALHES DE VERSAO E RELEASE OBTIDOS!"
    else
        echo "ERRO AO OBTER VERSAO E RELEASE RECENTES!"
        rm -f "$SCRIPT_PATH.tmp"
    fi
}



###############################
# Tratamento das opcoes que serao responsaveis por controlar na linha de comando
# ------------------------------------------------------------------------------

case "$1" in
-h | --help)
    clear
    echo "$MENSAGEM_USO"
    exit 0
    ;;
-V | --version)
    # Extrai a versao diretamente do cabecalho do programa
    clear
    mostrar_versao
    exit 0
    ;;
-up | --update)
    clear
    UPDATE
    exit 0
    ;;
*)
    if test -n "$1"; then
        echo Opcao invalida: $1
        exit 1
    fi
    ;;
esac

###############################


# Chamar a função com o caminho do arquivo
clear
BAIXAR_CONTROLE
ler_arquivo "$arquivo"
VALIDAR_VERSAO_RELEASE
