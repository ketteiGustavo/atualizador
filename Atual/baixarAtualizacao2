#!/bin/bash
#
################################################################################
# baixarAtualizacao.sh - Ira ler o arquivo gerado e baixar a atualizacao referente a data
#
# DATA: 01/07/2024 20:48 - Versao 1
#
# ------------------------------------------------------------------------------
# Autor: Luiz Gustavo <luiz.gustavo@avancoinfo.com.br>
#                     <luizgcesar@gmail.com.br>
# site: https://github.com/ketteiGustavo
# ------------------------------------------------------------------------------
# Versao 1: leitura do arquivo que contem a informacao
# ------------------------------------------------------------------------------
# Objetivo: facilitar a execucao do atualizador.
###############################


MENSAGEM_USO="
Programa: $(basename "$0")

--------------------------------------------------------------------------------
                              [OPCOES DISPONIVEIS]

OPCOES NA LINHA DE COMANDO:
    -h, --help      Mostra esta tela de ajuda e sai
    -V, --version   Mostra a versao do programa e sai
MODO DE USAR:

--------------------------------------------------------------------------------
"
#

# variaveis 
URL_BASE_VERSAO40="https://s3.amazonaws.com/avancoprogramas/integral/versao40-"
URL_BASE_VERSAO41="https://s3.amazonaws.com/avancoprogramas/integral/versao-"

URL_BASE_RELEASE40="https://s3.amazonaws.com/avancoprogramas/integral/release40-"
URL_BASE_RELEASE41="https://s3.amazonaws.com/avancoprogramas/integral/release-"

URL_ATUALIZADOV40=""
URL_ATUALIZADOV41=""

URL_ATUALIZADO_RELEASE=""

URL_ATUALIZADO_RELEASE_V40=""
URL_ATUALIZADO_RELEASE_V41=""

URL_BUSCAR_RELEASE=""

versao_Portal=""
release=""
data_release=""

release_busca=""

PASTA_DESTINO="/u/rede/avanco/atualizacoes"


# Funcao para extrair e exibir a versao do programa
mostrar_versao() {
    local versao=$(grep '^# DATA:' "$0" | head -1 | cut -d '-' -f 2 | sed 's/Versao //')
    echo -n "-Programa: $(basename "$0")"
    echo
    echo "-Versao: $versao"
}


arquivo_url="https://raw.githubusercontent.com/ketteiGustavo/atualizador/main/Atual/controle_ver_rel"
arquivo="/u/sist/controle/controle_ver_rel.txt"

if [ ! -f "/u/sist/controle/controle_ver_rel.txt" ]; then
    wget -P "$arquivo" "$arquivo_url"
fi

# Funcao para verificar qual o cobol usado
VERIFICA_COBOL() {
    RESULTADO=$(cobrun 2>&1)
    if [[ $RESULTADO =~ V([0-9]+\.[0-9]+) ]]; then
        versaoCobol="${BASH_REMATCH[1]}"
        echo "Versao do Cobol: $versaoCobol"
        inf_versaoCobol="$versaoCobol"
    fi
    #versaoCobol="4.0"
}

# Função para ler o arquivo e armazenar as informações em variáveis
ler_arquivo() {
    local arquivo="/u/sist/controle/controle_ver_rel.txt"
    local versao
    declare -A releases

    while IFS= read -r linha; do
        if [[ "$linha" =~ ^Versao\ disponivel\ no\ portal:\ ([0-9]+)$ ]]; then
            versao="${BASH_REMATCH[1]}"
        elif [[ "$linha" =~ ^RELEASE\ ([A-N])\ -\ DATA:\ ([0-9]+)$ ]]; then
            releases["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
        fi
    done < "$arquivo"

    echo "Versao disponivel no portal: $versao"
    versao_Portal="$versao"
    echo "$versao" > "/u/sist/controle/versaoIntegral"
    
    for release in "${!releases[@]}"; do
        echo "Release $release - Data: ${releases[$release]}" > /dev/null
    done
    
    # Verificar a release disponível de acordo com a data atual
    verificar_release_disponivel "$versao" releases
}

# Função para converter data no formato DDMMYY para YYYY-MM-DD
converter_data() {
    local data="$1"
    echo "20${data:4:2}-${data:2:2}-${data:0:2}"
}

# Função para verificar a release disponível de acordo com a data atual
verificar_release_disponivel() {
    local versao="$1"
    declare -n releases_ref="$2"
    local data_atual=$(date +%Y%m%d)
    #local data_atual="20240712"

    echo "mostrando data de hoje: $data_atual"

    for release in "${!releases_ref[@]}"; do
        local data_release="${releases_ref[$release]}"
        local data_release_yyyymmdd=$(date -d "$(converter_data "$data_release")" +%Y%m%d)

        if [[ "$data_atual" -ge "$data_release_yyyymmdd" ]]; then
            echo "Release atual: $release - Data: $data_release"
            echo "$release" > "/u/sist/controle/releaseIntegral"
            echo "$data_release" > "/u/sist/controle/dataReleaseIntegral"
            return
        fi
    done

    echo "Nenhuma release disponível encontrada para a data atual."
}

# Funcao para converter datas no formato YYYYMMDD, para ser usado em equacoes de comparacao, maior, menor e igual
CONVERTER_DATAS() {
    local dia="${1:0:2}"
    local mes="${1:2:2}"
    local ano="${1:4:2}"
    
    #echo "Dia: $dia"
    #echo "Mes: $mes"
    #echo "Ano: $ano"
    
    # Convertendo para o formato 'YYYYMMDD' para facilitar a adição de dias
    local data_formatada="20${ano}${mes}${dia}"
    echo "$data_formatada"
    
}

# Funcao para obter o link da versao atual, com base em comparacao de data por trimestre
BAIXAR_VERSAO() {
    VERIFICA_COBOL
    versaoBusca=$(<"/u/sist/controle/versaoIntegral")
    echo "$versaoBusca"
    # Verificando a versao do COBOL
    if [ "$versaoCobol" == "4.0" ]; then
        URL_BUSCAR_VERSAO="$URL_BASE_VERSAO40"
    elif [ "$versaoCobol" == "4.1" ]; then
        URL_BUSCAR_VERSAO="$URL_BASE_VERSAO41"
    else
        echo "Versao do COBOL invalida."
        echo "Versao do COBOL invalida." >> $ERRO_LOG_FILE
        exit 1
    fi

    URL_ATUALIZADO="$URL_BUSCAR_VERSAO$versaoBusca.rar"
    echo "$URL_ATUALIZADO"
    if curl --output /dev/null --silent --head --fail "$URL_ATUALIZADO"; then
        echo "Link encontrado para 'versao'"
        wget -c "$URL_ATUALIZADO" -P "$PASTA_DESTINO"
        return 0
    fi
    sleep 1
}

# Funcao para verificar se a release e valida e mais recente
BAIXAR_RELEASE() {
    VERIFICA_COBOL
    release_busca=$(<"//u/sist/controle/dataReleaseIntegral")
    versao_busca=$(<"/u/sist/controle/versaoIntegral")
    echo "arquivo txt release: $release_busca"
    echo "arquivo txt versao : $versao_busca"
    local rel="${release_busca:0:4}"
    local ver="${versao_busca:0:4}"
    
    echo "tratada versao: $ver"
    echo "tratada release: $rel"
    

    # Verificando a versao do COBOL
    if [ "$versaoCobol" == "4.0" ]; then
        URL_BUSCAR_RELEASE="$URL_BASE_RELEASE40"
    elif [ "$versaoCobol" == "4.1" ]; then
        URL_BUSCAR_RELEASE="$URL_BASE_RELEASE41"
    else
        echo "Versao do COBOL invalida."
        exit 1
    fi

    URL_ATUALIZADO_RELEASE="$URL_BUSCAR_RELEASE$ver-a-$rel.rar"
    if curl --output /dev/null --silent --head --fail "$URL_ATUALIZADO_RELEASE"; then
        wget -c "$URL_ATUALIZADO_RELEASE" -P "$PASTA_DESTINO"
        return 0
    fi
}

# Funcao para validar versao e release no cliente e baixar somente o necessario
VALIDAR_VERSAO_RELEASE () {
    local data_versao_comparar=$(CONVERTER_DATAS "$versao_Portal")
    local letra_release_atual="$release"
    read -p "Informe a versao: " versao_informada

    echo "A release atual e: $letra_release_atual"
    read -p "informe uma letra: " letra_informada

    if [ "$versao_informada" -lt "$data_versao_comparar" ]; then
        echo "Baixando versao e release..."
        BAIXAR_VERSAO
        BAIXAR_RELEASE
    elif [ "$versao_informada" -eq "$data_versao_comparar" ]; then
        echo "Versao atual ok"
        if [[ $letra_informada < $letra_release_atual ]]; then
            echo "Baixando release..."
            BAIXAR_RELEASE
        elif [[ $letra_informada == $letra_release_atual ]]; then
            echo "Voce esta na release atual"
        else
            echo "Release informada invalida"
        fi
    else
        echo "Voce informou uma versao invalida!"
    fi
}



# Chamar a função com o caminho do arquivo
clear
ler_arquivo
VALIDAR_VERSAO_RELEASE




###############################
# Tratamento das opcoes que serao responsaveis por controlar na linha de comando
# ------------------------------------------------------------------------------

case "$1" in
-h | --help)
    clear
    echo "$MENSAGEM_USO"
    exit 0
    ;;
-V | --version)
    # Extrai a versao diretamente do cabecalho do programa
    clear
    mostrar_versao
    exit 0
    ;;
*)
    if test -n "$1"; then
        echo Opcao invalida: $1
        exit 1
    fi
    ;;
esac

###############################
